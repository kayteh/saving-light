// Code generated by protoc-gen-go.
// source: cmd/sl-launcher/rpc/launcher.proto
// DO NOT EDIT!

/*
Package launcher is a generated protocol buffer package.

It is generated from these files:
	cmd/sl-launcher/rpc/launcher.proto

It has these top-level messages:
	LaunchRequest
	LaunchedInstance
*/
package launcher

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LaunchRequest struct {
	Image string `protobuf:"bytes,1,opt,name=image" json:"image,omitempty"`
}

func (m *LaunchRequest) Reset()                    { *m = LaunchRequest{} }
func (m *LaunchRequest) String() string            { return proto.CompactTextString(m) }
func (*LaunchRequest) ProtoMessage()               {}
func (*LaunchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LaunchRequest) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

type LaunchedInstance struct {
	NodeIp string `protobuf:"bytes,1,opt,name=node_ip,json=nodeIp" json:"node_ip,omitempty"`
	Port   int32  `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
}

func (m *LaunchedInstance) Reset()                    { *m = LaunchedInstance{} }
func (m *LaunchedInstance) String() string            { return proto.CompactTextString(m) }
func (*LaunchedInstance) ProtoMessage()               {}
func (*LaunchedInstance) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LaunchedInstance) GetNodeIp() string {
	if m != nil {
		return m.NodeIp
	}
	return ""
}

func (m *LaunchedInstance) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func init() {
	proto.RegisterType((*LaunchRequest)(nil), "launcher.LaunchRequest")
	proto.RegisterType((*LaunchedInstance)(nil), "launcher.LaunchedInstance")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Launcher service

type LauncherClient interface {
	Launch(ctx context.Context, in *LaunchRequest, opts ...grpc.CallOption) (*LaunchedInstance, error)
}

type launcherClient struct {
	cc *grpc.ClientConn
}

func NewLauncherClient(cc *grpc.ClientConn) LauncherClient {
	return &launcherClient{cc}
}

func (c *launcherClient) Launch(ctx context.Context, in *LaunchRequest, opts ...grpc.CallOption) (*LaunchedInstance, error) {
	out := new(LaunchedInstance)
	err := grpc.Invoke(ctx, "/launcher.Launcher/Launch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Launcher service

type LauncherServer interface {
	Launch(context.Context, *LaunchRequest) (*LaunchedInstance, error)
}

func RegisterLauncherServer(s *grpc.Server, srv LauncherServer) {
	s.RegisterService(&_Launcher_serviceDesc, srv)
}

func _Launcher_Launch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LaunchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LauncherServer).Launch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/launcher.Launcher/Launch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LauncherServer).Launch(ctx, req.(*LaunchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Launcher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "launcher.Launcher",
	HandlerType: (*LauncherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Launch",
			Handler:    _Launcher_Launch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cmd/sl-launcher/rpc/launcher.proto",
}

func init() { proto.RegisterFile("cmd/sl-launcher/rpc/launcher.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 173 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x52, 0x4a, 0xce, 0x4d, 0xd1,
	0x2f, 0xce, 0xd1, 0xcd, 0x49, 0x2c, 0xcd, 0x4b, 0xce, 0x48, 0x2d, 0xd2, 0x2f, 0x2a, 0x48, 0xd6,
	0x87, 0x71, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x38, 0x60, 0x7c, 0x25, 0x55, 0x2e, 0x5e,
	0x1f, 0x30, 0x3b, 0x28, 0xb5, 0xb0, 0x34, 0xb5, 0xb8, 0x44, 0x48, 0x84, 0x8b, 0x35, 0x33, 0x37,
	0x31, 0x3d, 0x55, 0x82, 0x51, 0x81, 0x51, 0x83, 0x33, 0x08, 0xc2, 0x51, 0xb2, 0xe7, 0x12, 0x80,
	0x28, 0x4b, 0x4d, 0xf1, 0xcc, 0x2b, 0x2e, 0x49, 0xcc, 0x4b, 0x4e, 0x15, 0x12, 0xe7, 0x62, 0xcf,
	0xcb, 0x4f, 0x49, 0x8d, 0xcf, 0x2c, 0x80, 0xaa, 0x65, 0x03, 0x71, 0x3d, 0x0b, 0x84, 0x84, 0xb8,
	0x58, 0x0a, 0xf2, 0x8b, 0x4a, 0x24, 0x98, 0x14, 0x18, 0x35, 0x58, 0x83, 0xc0, 0x6c, 0x23, 0x6f,
	0x2e, 0x0e, 0xa8, 0x01, 0x45, 0x42, 0xf6, 0x5c, 0x6c, 0x10, 0xb6, 0x90, 0xb8, 0x1e, 0xdc, 0x61,
	0x28, 0xae, 0x90, 0x92, 0x42, 0x97, 0x40, 0xd8, 0xab, 0xc4, 0x90, 0xc4, 0x06, 0xf6, 0x85, 0x31,
	0x20, 0x00, 0x00, 0xff, 0xff, 0x2c, 0x3c, 0xbd, 0xfd, 0xeb, 0x00, 0x00, 0x00,
}
