// Code generated by protoc-gen-go.
// source: cmd/sl-coordinator/rpc/coordinator.proto
// DO NOT EDIT!

/*
Package coordinator is a generated protocol buffer package.

It is generated from these files:
	cmd/sl-coordinator/rpc/coordinator.proto

It has these top-level messages:
	ServerQuery
	GameServer
	GameServerList
*/
package coordinator

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/kayteh/saving-light/vendor/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ServerQuery struct {
	Query map[string]string `protobuf:"bytes,1,rep,name=query" json:"query,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Qs    string            `protobuf:"bytes,2,opt,name=qs" json:"qs,omitempty"`
}

func (m *ServerQuery) Reset()                    { *m = ServerQuery{} }
func (m *ServerQuery) String() string            { return proto.CompactTextString(m) }
func (*ServerQuery) ProtoMessage()               {}
func (*ServerQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ServerQuery) GetQuery() map[string]string {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *ServerQuery) GetQs() string {
	if m != nil {
		return m.Qs
	}
	return ""
}

type GameServer struct {
	Id          string            `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Address     string            `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
	Annotations map[string]string `protobuf:"bytes,3,rep,name=annotations" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *GameServer) Reset()                    { *m = GameServer{} }
func (m *GameServer) String() string            { return proto.CompactTextString(m) }
func (*GameServer) ProtoMessage()               {}
func (*GameServer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GameServer) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GameServer) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GameServer) GetAnnotations() map[string]string {
	if m != nil {
		return m.Annotations
	}
	return nil
}

type GameServerList struct {
	Servers []*GameServer `protobuf:"bytes,1,rep,name=servers" json:"servers,omitempty"`
}

func (m *GameServerList) Reset()                    { *m = GameServerList{} }
func (m *GameServerList) String() string            { return proto.CompactTextString(m) }
func (*GameServerList) ProtoMessage()               {}
func (*GameServerList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GameServerList) GetServers() []*GameServer {
	if m != nil {
		return m.Servers
	}
	return nil
}

func init() {
	proto.RegisterType((*ServerQuery)(nil), "coordinator.ServerQuery")
	proto.RegisterType((*GameServer)(nil), "coordinator.GameServer")
	proto.RegisterType((*GameServerList)(nil), "coordinator.GameServerList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Coordinator service

type CoordinatorClient interface {
	GetGameServers(ctx context.Context, in *ServerQuery, opts ...grpc.CallOption) (*GameServerList, error)
}

type coordinatorClient struct {
	cc *grpc.ClientConn
}

func NewCoordinatorClient(cc *grpc.ClientConn) CoordinatorClient {
	return &coordinatorClient{cc}
}

func (c *coordinatorClient) GetGameServers(ctx context.Context, in *ServerQuery, opts ...grpc.CallOption) (*GameServerList, error) {
	out := new(GameServerList)
	err := grpc.Invoke(ctx, "/coordinator.Coordinator/GetGameServers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Coordinator service

type CoordinatorServer interface {
	GetGameServers(context.Context, *ServerQuery) (*GameServerList, error)
}

func RegisterCoordinatorServer(s *grpc.Server, srv CoordinatorServer) {
	s.RegisterService(&_Coordinator_serviceDesc, srv)
}

func _Coordinator_GetGameServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).GetGameServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coordinator.Coordinator/GetGameServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).GetGameServers(ctx, req.(*ServerQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _Coordinator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "coordinator.Coordinator",
	HandlerType: (*CoordinatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGameServers",
			Handler:    _Coordinator_GetGameServers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cmd/sl-coordinator/rpc/coordinator.proto",
}

func init() { proto.RegisterFile("cmd/sl-coordinator/rpc/coordinator.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 328 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x92, 0xc1, 0x4a, 0xf3, 0x40,
	0x14, 0x85, 0x49, 0x4a, 0xff, 0xf2, 0xdf, 0x40, 0x29, 0x17, 0xc1, 0x21, 0xba, 0x28, 0x75, 0x93,
	0x4d, 0x33, 0xb4, 0x6e, 0xaa, 0x0b, 0x41, 0x8a, 0x14, 0xc4, 0x8d, 0xf5, 0x09, 0xc6, 0xce, 0x50,
	0x06, 0xdb, 0x4c, 0x3a, 0x33, 0x2d, 0x74, 0xeb, 0x23, 0xe8, 0x1b, 0xf9, 0x0a, 0xbe, 0x82, 0x0f,
	0x22, 0x93, 0xa4, 0xcc, 0x28, 0x74, 0xe1, 0x26, 0xcc, 0x4d, 0xbe, 0x73, 0xce, 0x3d, 0x49, 0x20,
	0x5b, 0xac, 0x39, 0x35, 0xab, 0xe1, 0x42, 0x29, 0xcd, 0x65, 0xc1, 0xac, 0xd2, 0x54, 0x97, 0x0b,
	0x1a, 0xcc, 0x79, 0xa9, 0x95, 0x55, 0x98, 0x04, 0xb7, 0xd2, 0xf3, 0xa5, 0x52, 0xcb, 0x95, 0xa0,
	0xac, 0x94, 0x94, 0x15, 0x85, 0xb2, 0xcc, 0x4a, 0x55, 0x98, 0x1a, 0x1d, 0xbc, 0x45, 0x90, 0x3c,
	0x09, 0xbd, 0x13, 0xfa, 0x71, 0x2b, 0xf4, 0x1e, 0xaf, 0xa0, 0xbd, 0x71, 0x07, 0x12, 0xf5, 0x5b,
	0x59, 0x32, 0xbe, 0xc8, 0x43, 0xf7, 0x00, 0xcc, 0xab, 0xeb, 0x5d, 0x61, 0xf5, 0x7e, 0x5e, 0x2b,
	0xb0, 0x0b, 0xf1, 0xc6, 0x90, 0xb8, 0x1f, 0x65, 0xff, 0xe7, 0xf1, 0xc6, 0xa4, 0x13, 0x00, 0x0f,
	0x61, 0x0f, 0x5a, 0x2f, 0xc2, 0xd9, 0xba, 0xc7, 0xee, 0x88, 0x27, 0xd0, 0xde, 0xb1, 0xd5, 0x56,
	0x34, 0x92, 0x7a, 0xb8, 0x8e, 0x27, 0xd1, 0xe0, 0x23, 0x02, 0x98, 0xb1, 0xb5, 0xa8, 0xf3, 0x9c,
	0xb1, 0xe4, 0x8d, 0x32, 0x96, 0x1c, 0x09, 0x74, 0x18, 0xe7, 0x5a, 0x98, 0x43, 0xda, 0x61, 0xc4,
	0x7b, 0x48, 0x82, 0x8a, 0xa4, 0x55, 0x75, 0xc8, 0x7e, 0x74, 0xf0, 0xbe, 0xf9, 0xad, 0x47, 0xeb,
	0x22, 0xa1, 0x38, 0xbd, 0x81, 0xde, 0x6f, 0xe0, 0x4f, 0x25, 0xa6, 0xd0, 0xf5, 0x59, 0x0f, 0xd2,
	0x58, 0x1c, 0x41, 0xc7, 0x54, 0x93, 0x69, 0xde, 0xee, 0xe9, 0x91, 0xcd, 0xe6, 0x07, 0x6e, 0x5c,
	0x42, 0x32, 0xf5, 0x08, 0x32, 0xe8, 0xce, 0x84, 0xf5, 0xa0, 0x41, 0x72, 0xec, 0x03, 0xa5, 0x67,
	0x47, 0xcc, 0xdd, 0x2a, 0x03, 0xf2, 0xfa, 0xf9, 0xf5, 0x1e, 0x23, 0xf6, 0xe8, 0x6e, 0x44, 0x97,
	0x6c, 0x2d, 0x86, 0x4d, 0xe2, 0xf3, 0xbf, 0xea, 0xbf, 0xb8, 0xfc, 0x0e, 0x00, 0x00, 0xff, 0xff,
	0x49, 0xe1, 0xdd, 0xb8, 0x6e, 0x02, 0x00, 0x00,
}
